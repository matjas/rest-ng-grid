{"version":3,"sources":["rest-ng-grid-src.js","templates.js"],"names":[],"mappingshtfile":"rest-ng-grid.js","sourcesContent":["(function (window, angular, undefined) {\n  'use strict';\n  var isDefined = angular.isDefined,\n      isUndefined = angular.isUndefined,\n      isFunction = angular.isFunction,\n      isString = angular.isString,\n      isNumber = angular.isNumber,\n      isObject = angular.isObject,\n      isArray = angular.isArray,\n      forEach = angular.forEach,\n      extend = angular.extend,\n      copy = angular.copy,\n      equals = angular.equals;\n  angular.module('restNgGrid', ['ui.bootstrap', 'ngResource'])\n      .constant('restNgGridConfig', {\n        options: {\n          gridUniqueId: null,\n          gridClass: '',\n          columns: {\n            titles: null,\n            fields: []\n          },\n          footer: '',\n          childCount: \"children\",\n          childrenParam: \"\", //show recursively children from json\n          editMode: \"modal\", //\"inline\", \"modal\"\n          rowOptions: \"dropdown\", // \"inline\", \"dropdown\"\n          hierarchy: false, //if true then grid has children with the same parameters (infinite children from API)\n          dataSource: {\n            transport: {},\n            type: 'odb'\n          }\n        }\n      })\n      .factory('restNgGridService', ['$http', '$q', '$resource', function ($http, $q, $resource) {\n        return {\n          urlBuilder: function (urlSchema, params) {\n            var url = urlSchema;\n            var re = /{[^}]*}/g;\n            var keysArray = url.match(re);\n            forEach(keysArray, function (value, key) {\n              var len = value.length,\n                  par = (value.substring(1, len - 1)).split(\".\"),\n                  expectedValue = angular.copy(params);\n              forEach(par, function (val, key) {\n                if (expectedValue) {\n                  expectedValue = expectedValue[val];\n                }\n              });\n              url = url.replace(value, expectedValue);\n            });\n            return url;\n          },\n          updateChildrenColumn: function(item, columnName){\n            var recursiveFn = function(el){\n              if(el.children){\n                angular.forEach(el.children, function(c){\n                  c[columnName] = item[columnName];\n                  recursiveFn(c);\n                });\n              }\n            };\n            recursiveFn(item);\n          },\n          query: function (url) {\n            var that = this,\n                q = $q.defer();\n            $http({\n              mtehod: 'GET',\n              url: url\n            }).then(function successCallback(response) {\n                  if (response) {\n                    q.resolve(response.data)\n                  }\n                }, function errorCallback(errorMsg) {\n                  if (errorMsg) {\n                    q.reject([]);\n                  }\n                }\n            );\n\n            return q.promise\n          },\n          delete: function (url) {\n            var that = this,\n                q = $q.defer();\n            $http.delete(url).then(function successCallback(response) {\n                  if (response) {\n                    q.resolve(response)\n                  }\n                }, function errorCallback(response) {\n                  if (response) {\n                    q.reject(response);\n                  }\n                }\n            );\n\n            return q.promise\n          },\n          update: function (url, body) {\n            var q = $q.defer();\n            $http({\n              method: 'PUT',\n              url: url,\n              data: body\n            }).then(function successCallback(response) {\n                  if (response) {\n                    q.resolve(response.data)\n                  }\n                }, function errorCallback(errorMsg) {\n                  if (errorMsg) {\n                    q.reject([]);\n                  }\n                }\n            );\n\n            return q.promise\n          }\n        }\n      }])\n      .controller('RestNgGridCtrl', ['$rootScope', '$scope', '$element', '$attrs', '$compile',\n        'restNgGridConfig', 'restNgGridService', '$uibModal', '$resource', '$filter', '$locale', '$templateCache',\n        function ($rootScope, $scope, $element, $attrs, $compile,\n                  restNgGridConfig, restNgGridService, $uibModal, $resource, $filter, $locale, $templateCache) {\n          // This array keeps track of the columns\n          var restNgGridCtrl = this;\n          this.gId = guid();\n\n          this.titleList = [];\n          this.titleLength = 0;\n          this.columnList = [];\n          this.isTranscluded = false;\n          this.restNgGridService = restNgGridService;\n          this.options = {};\n\n          this.inlineMode = {id: null};\n          var orgItem = null;\n\n          //isDefined($scope.options) ? angular.extend(this.options, $scope.options) : restNgGridConfig.options;\n          this.options = angular.merge({}, restNgGridConfig.options, $scope.options);\n          this.apiUrl = this.options.dataSource.transport;\n          $scope.items = $scope.items || [];\n\n          var url = \"\";\n          this.orderBy = this.options.columns.orderBy;\n          this.parentId = this.options.dataSource.parentId || 'id';\n          this.itemId = this.options.dataSource.itemId;\n\n          $scope.currentItem = {id: null};\n\n          $scope.localeId = $locale.id;\n\n          //Generate Guid\n          function guid() {\n            function s4() {\n              return Math.floor((1 + Math.random()) * 0x10000)\n                  .toString(16)\n                  .substring(1);\n            }\n\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n                s4() + '-' + s4() + s4() + s4();\n          }\n\n          this.addColumns = function (scope, options) {\n            if (options && options.columns && options.columns.titles) {\n              if(angular.isArray(options.columns.titles)){\n                forEach(options.columns.titles, function (title) {\n                  scope.titleList.push(title);\n                });\n                scope.titleLength = options.columns.titles.length;\n              } else if (angular.isNumber(options.columns.titles)){\n                scope.titleLength = options.columns.titles\n              }\n            }\n            if (options && options.columns && options.columns.fields) {\n              var fl = '',\n                  colspan = 0,\n                  style = '',\n                  filter = '',\n                  type = '',\n                  validation = {},\n                  visibility = {},\n                  isEditable = false,\n                  link = '',\n                  onChange = false,\n                  inputName = '',\n                  radioValue = null,\n                  changeChildren;\n\n              forEach(options.columns.fields, function (f) {\n                fl = f.field || '';\n                colspan = f.colspan || 0;\n                style = f.style || {'width': 'auto'};\n                filter = f.filter || {name: '', format: ''};\n                type = f.type || 'text';\n                validation = f.validation || {required: false};\n                visibility = f.visibility || {bitMask: null, field: []};\n                isEditable = f.isEditable || false;\n                link = f.link || '';\n                onChange = f.onChange || false;\n                inputName = f.inputName || 'mj-input';\n                radioValue = f.radioValue || null;\n                changeChildren = f.changeChildren || false;\n\n                scope.columnList.push({\n                  field: fl,\n                  colspan: colspan,\n                  style: style,\n                  filter: filter,\n                  type: type,\n                  validation: validation,\n                  visibility: visibility,\n                  isEditable: isEditable,\n                  link: link,\n                  onChange: onChange,\n                  inputName: inputName,\n                  radioValue: radioValue,\n                  changeChildren: changeChildren\n                });\n              });\n            }\n          };\n\n          this.closeGroups = function () {\n            forEach($scope.items, function (item) {\n              item.isOpen = false;\n            });\n          };\n\n          function clearArray(arr) {\n            if (arr) {\n              while (arr.length > 0) {\n                arr.pop();\n              }\n              return arr;\n            }\n          }\n\n          function deepMerge(src, dst) {\n            var i;\n            for (i in dst) {\n              if (src.hasOwnProperty(i)) {\n                if (angular.isObject(src[i])) {\n                  //dst[i] = angular.isArray(dst[i]) ? [] : {};\n                  deepMerge(src[i], dst[i])\n                } else {\n                  if (src) {\n                    dst[i] = src[i]\n                  }\n                }\n              }\n            }\n            return dst;\n          }\n\n          this.toggleRow = function (e, item) {\n            if (e) {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n            }\n            if (restNgGridCtrl.isTranscluded) {\n              item.isOpen = !item.isOpen;\n            }\n            if (angular.isFunction($scope.selectItem)) {\n              $scope.selectItem(item);\n            }\n            $rootScope.$broadcast('selectRow', {id: item.id, gId: restNgGridCtrl.gId});\n            if (item.isOpen) {\n              if (restNgGridCtrl.itemId) {\n                $scope.params[restNgGridCtrl.itemId] = item.id;\n              }\n              if ($scope.options.dataSource.type == 'tree') {\n                $rootScope.$broadcast('expandRow', item);\n              } else {\n                $scope.params = deepMerge(item, $scope.params);\n                $rootScope.$broadcast('expandRow', {id: item.id, gId: restNgGridCtrl.gId});\n              }\n            }\n\n          };\n\n          this.selectRow = function (e, item, column) {\n            if (e && !column && !column.link) {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n            }\n            $scope.currentItem.id = item.id;\n            if (angular.isFunction($scope.selectItem)) {\n              $scope.selectItem(item);\n            }\n            $rootScope.$broadcast('selectRow', {id: item.id, gId: restNgGridCtrl.gId});\n          };\n\n          var onExpandRowListener = $rootScope.$on('expandRow', function (event, data) {\n\n            if ($scope.$parent.parentItem && $scope.$parent.parentItem.id === data.id && $scope.$parent.parentItem.gId === data.gId) {\n              $scope.params = $scope.$parent.params;\n              getQuery($scope.params, data);\n            }\n          });\n\n          var onSelectRowListener = $rootScope.$on('selectRow', function (event, data) {\n            if (restNgGridCtrl.gId == data.gId) {\n              $scope.currentItem.id = data.id\n            } else {\n              $scope.currentItem.id = null;\n            }\n          });\n\n          function getQuery(params, data) {\n            if ($scope.options.dataSource.transport && $scope.options.dataSource.transport.query) {\n              url = restNgGridService.urlBuilder($scope.options.dataSource.transport.query, params);\n              restNgGridService.query(url).then(function (response) {\n                if ($scope.options.dataSource.arrayListParam) {\n                  response = response[$scope.options.dataSource.arrayListParam]\n                }\n                if (!Array.isArray(response)) {\n                  response = [response]\n                }\n                if (restNgGridCtrl.orderBy) {\n                  response = $filter('orderBy')(response, restNgGridCtrl.orderBy)\n                }\n                clearArray($scope.items);\n                angular.forEach(response, function (value) {\n                  $scope.items.push(value);\n                });\n              }, function (response) {\n                clearArray($scope.items)\n              })\n            } else if ($scope.options.dataSource.type == 'tree') { //when classic tree list with children dependencies\n              clearArray($scope.items);\n              angular.forEach(data.children, function (value) {\n                $scope.items.push(value);\n              });\n            }\n          }\n\n          var onNewRowListener = $rootScope.$on('addNewRow', function (event, data) {\n            if ($scope.$parent.parentItem && $scope.$parent.parentItem.id === data.item[restNgGridCtrl.parentId]) {\n              if (restNgGridCtrl.options.gridUniqueId && restNgGridCtrl.options.gridUniqueId === data.gridUniqueId) {\n                $scope.items.push(data.item);\n              } else if (!restNgGridCtrl.options.gridUniqueId) {\n                $scope.items.push(data.item);\n              }\n            }\n          });\n\n          this.addItem = function (item) {\n            restNgGridCtrl.inlineMode.id = null;\n            orgItem = null;\n            if ($scope.addRow) {\n              $scope.addRow(item).then(function (item) {\n                if ($scope.options.dataSource.transport.query) {\n                  if (!angular.isArray($scope.items)) {\n                    $scope.items = [$scope.items]\n                  }\n                  if (item) {\n                    $scope.items.push(item);\n                  }\n                }\n              }, function (error) {\n\n              });\n            }\n          };\n\n          this.addChildItem = function (item) {\n            restNgGridCtrl.inlineMode.id = null;\n            orgItem = null;\n            $scope.addChildRow(item).then(function (itemChild) {\n              restNgGridCtrl.toggleRow(null, item);\n              item[restNgGridCtrl.options.childCount] = item[restNgGridCtrl.options.childCount] + 1;\n              restNgGridCtrl.selectRow(null, item);\n              $rootScope.$broadcast('addNewRow', {item: itemChild});\n            }, function () {\n              console.log('handle error');\n            });\n          };\n\n          this.editItem = function (item) {\n            $scope.params[restNgGridCtrl.itemId] = item.id;\n            $scope.params[restNgGridCtrl.parentId] = item[restNgGridCtrl.parentId];\n            if (restNgGridCtrl.options.editMode == 'inline') {\n              restNgGridCtrl.inlineMode.id = item.id;\n              orgItem = angular.copy(item)\n            }\n            if ($scope.updateRow && restNgGridCtrl.options.editMode == 'modal') {\n              updateRowExternal(item);\n            }\n          };\n\n          function updateRowExternal(item) {\n            $scope.updateRow(item).then(function (updatedItem) {\n              angular.extend(item, updatedItem);\n              restNgGridCtrl.inlineMode.id = null;\n            }, function (error) {\n              restNgGridCtrl.cancelEditMode(item);\n            })\n          }\n\n          this.saveRow = function (item, e) {\n            $scope.params[restNgGridCtrl.itemId] = item.id;\n            $scope.params[restNgGridCtrl.parentId] = item[restNgGridCtrl.parentId];\n            if ($scope.updateRow) {\n              updateRowExternal(item);\n            } else {\n              url = restNgGridService.urlBuilder(restNgGridCtrl.apiUrl.update, $scope.params);\n              restNgGridCtrl.restNgGridService.update(url, item).then(function (response) {\n                angular.extend(item, response);\n                restNgGridCtrl.inlineMode.id = null;\n              }, function (response) {\n                restNgGridCtrl.cancelEditMode(item);\n              });\n            }\n          };\n\n          this.cancelEditMode = function (item) {\n            restNgGridCtrl.inlineMode.id = null;\n            angular.extend(item, orgItem);\n            orgItem = null;\n          };\n\n\n          this.ModalInstanceDelete = function ($scope, $uibModalInstance, name) {\n            $scope.deleteObjectName = name;\n            $scope.confirm = function (result) {\n              return $uibModalInstance.close(result);\n            };\n            return $scope.cancel = function () {\n              return $uibModalInstance.dismiss('cancel');\n            };\n          };\n\n          this.deleteItem = function (item) {\n            restNgGridCtrl.deleteRow(item);\n          };\n\n          this.deleteRow = function (item) {\n            var url = \"\";\n            return $uibModal.open({\n              templateUrl: $templateCache.get('rest-ng-grid-delete.html'),\n              controller: restNgGridCtrl.ModalInstanceDelete,\n              animation: false,\n              backdrop: true,\n              resolve: {\n                name: function () {\n                  return item.name;\n                }\n              }\n            }).result.then(function () {\n              $scope.params[restNgGridCtrl.itemId] = item.id;\n              $scope.params[restNgGridCtrl.parentId] = item[restNgGridCtrl.parentId];\n              url = restNgGridService.urlBuilder(restNgGridCtrl.apiUrl.delete, $scope.params);\n              restNgGridCtrl.restNgGridService.delete(url).then(function (response) {\n                var idx = $scope.items.indexOf(item);\n                if (idx >= 0) {\n                  $scope.items.splice(idx, 1);\n                }\n              }, function (response) {\n                console.log('handle error');\n              });\n            });\n          };\n\n          this.getValue = function (item, prop, filter, visibility) {\n            var tmpVal = item,\n                visibilityField = null;\n            if (!angular.isArray(prop)) {\n              prop = [prop]\n            }\n            if (visibility) {\n              if (!angular.isArray(visibility.field)) {\n                visibility.field = [visibility.field];\n              }\n\n              angular.forEach(visibility.field, function (val) {\n                visibilityField = tmpVal[val];\n              });\n              if (visibilityField && !(visibility.bitMask & visibilityField)) {\n                return ''\n              }\n            }\n\n            if (filter && !angular.isArray(filter)) {\n              filter = [filter]\n            }\n            angular.forEach(prop, function (val) {\n              if (tmpVal) {\n                tmpVal = tmpVal[val]\n              }\n            });\n            angular.forEach(filter, function (val) {\n              if (tmpVal && val.name && val.format) {\n                tmpVal = $filter(val.name)(tmpVal, val.format)\n              }\n            });\n            return tmpVal\n          };\n\n          function cellEditable(item, column) {\n            var isEditable = false,\n                tmpVal = item;\n            if (angular.isObject(column.isEditable)) {\n              if (column.isEditable.path) {\n                angular.forEach(column.isEditable.path, function (val) {\n                  if (tmpVal) {\n                    tmpVal = tmpVal[val]\n                  }\n                });\n                if (column.isEditable.trueValue == tmpVal) {\n                  isEditable = true;\n                }\n              } else {\n                isEditable = false;\n              }\n            } else {\n              isEditable = column.isEditable;\n            }\n            return isEditable;\n          }\n\n          //edit mode or content\n          this.checkIfContent = function (item, column) {\n            var isEditable = cellEditable(item, column);\n            return (restNgGridCtrl.inlineMode.id !== item.id && !$scope.editAllRows) || !isEditable;\n          };\n\n          this.checkIfEdit = function (item, column) {\n            var isEditable = cellEditable(item, column);\n            return (restNgGridCtrl.inlineMode.id == item.id || $scope.editAllRows) && isEditable;\n          };\n\n          this.checkIfRowEditable = function (item) {\n            var isEditable = false;\n            angular.forEach(restNgGridCtrl.columnList, function (column) {\n              if (!isEditable) {\n                isEditable = cellEditable(item, column);\n              }\n            });\n            return isEditable;\n          };\n          this.changeCellEvent = function (item, column) {\n            if (column.onChange) {\n              column.onChange(item);\n            }\n            if(column.changeChildren && $scope.options.dataSource.type !== 'tree'){\n              $scope.$broadcast('changeChildren', {item: item, column: column})\n            } else if(column.changeChildren){\n              restNgGridService.updateChildrenColumn(item, column.field);\n            }\n          };\n          //end edit mode or content\n\n          this.onCellLinkClick = function (item, field, fn) {\n            fn(item[field]);\n          };\n\n          $scope.$watch('getDataTrigger', function (value) {\n            if (value) {\n              clearArray($scope.items);\n              getQuery($scope.params, value);\n              $scope.getDataTrigger = false;\n            }\n          });\n\n          $scope.$watch('getExpandRowTrigger', function (id) {\n            if (id) {\n              restNgGridCtrl.selectRow(null, {id: id});\n            }\n          });\n\n          var onEditTriggerListener = $rootScope.$on('editTriggerHandler', function (event, data) {\n            if (data.type == 'all') {\n              $scope.editAllRows = data.status\n            }\n          });\n          var onChangeChildrenTriggerListener = $scope.$on('changeChildren', function (event, data) {\n            //handle change children if no tree\n          });\n\n          $scope.editTrigger = function (data) {\n            if (data.type == 'all') {\n              $rootScope.$broadcast('editTriggerHandler', {type: data.type, status: data.status});\n            }\n          };\n\n          $scope.$on('$localeChangeSuccess', function (e) {\n            $scope.localeId = $locale.id;\n          });\n\n          $scope.$on('$destroy', onExpandRowListener, onNewRowListener, onEditTriggerListener, onSelectRowListener, onChangeChildrenTriggerListener);\n\n          //$scope.$on('$destroy', function(){\n          //  console.log( $scope.$id,'destroyed scope');\n          //  onExpandRowListener = null;\n          //  onNewRowListener = null;\n          //  //$scope.items = []\n          //  $scope.$destroy()\n          //});\n\n\n        }])\n      .directive('restNgGrid', ['$compile', '$templateCache', function ($compile, $templateCache) {\n        return {\n          restrict: 'EA',\n          transclude: true,\n          template: $templateCache.get('rest-ng-grid.html'),\n          controller: 'RestNgGridCtrl',\n          controllerAs: 'restNgGridCtrl',\n          //scope: true,\n          scope: {\n            options: '=?',\n            items: '=?',\n            params: '=?',\n            addRow: '=?',\n            addChildRow: '=?',\n            updateRow: '=?',\n            getDataTrigger: \"=?\",\n            editTrigger: \"=?\",\n            gridClass: \"@\",\n            footerOptions: \"=?\",\n            selectItem: \"=?\",\n            isReadOnly: \"=?\",\n            getExpandRowTrigger: \"=\",\n            editAllRows: \"=\"\n          },\n          link: function (scope, element, attrs, restNgGridCtrl) {\n            restNgGridCtrl.addColumns(restNgGridCtrl, restNgGridCtrl.options);\n            //restNgGridCtrl.manageData();\n            //scope.parentItem =  restNgGridCtrl.getData();\n            //restNgGridCtrl.getData();\n            //restNgGridCtrl.closeGroups();\n            function applyFooter() {\n              var footer = angular.element(restNgGridCtrl.options.footer);\n              //angular.element($element).html(tpl1);\n              //$compile($element.contents())($scope);\n\n            }\n          }\n        }\n      }])\n      .directive('restNgGridTransclude', ['$templateCache', '$compile', function ($templateCache, $compile) {\n        function link($scope, element, attributes, restNgGridCtrl, transclude) {\n          var transcludedContent, transclusionScope;\n          if (restNgGridCtrl) {\n            var newScope = $scope.$parent.$parent.$new();\n            //put result from isolate to be available to transcluded content\n            newScope.parentItem = $scope.$eval(attributes.currentItem);\n            newScope.parentItem.gId = restNgGridCtrl.gId;\n            newScope.params = $scope.$eval(attributes.params);\n            transclude(newScope, function (clone, scope) {\n              //var content = null\n              element.empty();\n\n\n              clone.length > 0 ? restNgGridCtrl.isTranscluded = true : restNgGridCtrl.isTranscluded = false;\n              element.append(clone);\n              transcludedContent = clone;\n              transclusionScope = scope;\n            });\n\n          }\n          element.on('$destroy', function () {\n            transcludedContent.remove();\n            transclusionScope.$destroy();\n          });\n        }\n\n        return {\n          require: '^?restNgGrid',\n          link: link,\n          restrict: \"A\"\n          //transclude: 'element'\n        }\n      }])\n\n      .directive('restGridChildren', ['$templateCache', function ($templateCache) {\n        return {\n          restrict: 'E',\n          replace: true,\n          template: $templateCache.get('rest-ng-grid-select-group.html'),\n          scope: {\n            collection: '=?',\n            options: \"=?\",\n            field: \"=\",\n            filter: \"=\"\n          },\n          link: function ($scope, element, attributes) {\n            if ($scope.collection) {\n              if (!angular.isArray($scope.collection)) {\n                $scope.collection = [$scope.collection];\n              }\n            }\n            $scope.setValue = function (item, prop, filter) {\n              var tmpVal = item;\n              if (!angular.isArray(prop)) {\n                prop = [prop]\n              }\n              if (filter && !angular.isArray(filter)) {\n                filter = [filter]\n              }\n              angular.forEach(prop, function (val) {\n                if (tmpVal) {\n                  tmpVal = tmpVal[val]\n                }\n              });\n              angular.forEach(filter, function (val) {\n                if (tmpVal && val.name && val.format) {\n                  tmpVal = $filter(val.name)(tmpVal, val.format)\n                }\n              });\n              return tmpVal\n            };\n          }\n        }\n      }])\n\n})(window, window.angular);\n\n","(function(module) {\ntry {\n  module = angular.module('restNgGrid');\n} catch (e) {\n  module = angular.module('restNgGrid', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('rest-ng-grid-delete.html',\n    '<div class=\"modal-header\">\\n' +\n    '\t<button type=\"button\" class=\"close\" data-ng-click=\"cancel()\">×</button>\\n' +\n    '\t<h4 class=\"modal-title\">Delete</h4>\\n' +\n    '</div>\\n' +\n    '<div class=\"modal-body\">\\n' +\n    '\t<p>Delete <strong>{{deleteObjectName}}</strong>, Are you sure?</p>\\n' +\n    '</div>\\n' +\n    '<div class=\"modal-footer\">\\n' +\n    '\t<button type=\"button\" class=\"btn\" ng-click=\"cancel()\">Cancel</button>\\n' +\n    '\t<button type=\"button\" class=\"btn btn-danger\" ng-click=\"confirm()\">Delete</button>\\n' +\n    '</div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('restNgGrid');\n} catch (e) {\n  module = angular.module('restNgGrid', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('rest-ng-grid-select-group.html',\n    '<div class=\"list\">\\n' +\n    '    <ul>\\n' +\n    '        <li data-ng-include=\"\\'rest-ng-grid-sub-level.html\\'\"\\n' +\n    '            data-ng-repeat=\"member in collection\"></li>\\n' +\n    '    </ul>\\n' +\n    '</div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('restNgGrid');\n} catch (e) {\n  module = angular.module('restNgGrid', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('rest-ng-grid-sub-level.html',\n    '<span>{{ setValue(member, field, filter) }}</span>\\n' +\n    '<ul>\\n' +\n    '    <li ng-repeat=\"member in member[options.childrenParam]\" ng-include=\"\\'rest-ng-grid-sub-level.html\\'\"></li>\\n' +\n    '</ul>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('restNgGrid');\n} catch (e) {\n  module = angular.module('restNgGrid', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('rest-ng-grid.html',\n    '<div  data-ng-style=\"{{ restNgGridCtrl.options.style }}\" class=\"mj-grid {{ restNgGridCtrl.options.gridClass }}\"\\n' +\n    '\t  data-ng-class=\"{\\'no-title\\':\\n' +\n    'restNgGridCtrl.titleList.length == 0}\">\\n' +\n    '\t<div class=\"mj-grid-header\">\\n' +\n    '\t\t<div class=\"mj-grid-header-wrap\"></div>\\n' +\n    '\t</div>\\n' +\n    '\t<div class=\"mj-grid-content\">\\n' +\n    '\t\t<!--{{ $id }}-->\\n' +\n    '\t\t<table role=\"grid\" class=\"table table-responsive out\">\\n' +\n    '\t\t\t<thead role=\"rowgroup\" data-ng-if=\"restNgGridCtrl.titleList.length > 0\">\\n' +\n    '\t\t\t<tr role=\"row\">\\n' +\n    '\t\t\t\t<th ng-style=\"{{ t.style }}\" colspan=\"{{ t.colspan }}\" role=\"columnheader\"\\n' +\n    '\t\t\t\t\tdata-ng-repeat=\"t in restNgGridCtrl.titleList\">\\n' +\n    '\t\t\t\t\t<span ng-show=\"t.title[localeId]\">{{ t.title[localeId] }}</span>\\n' +\n    '\t\t\t\t\t<span ng-show=\"!t.title[localeId]\">{{ t.title }}</span>\\n' +\n    '\t\t\t\t</th>\\n' +\n    '\t\t\t\t<th class=\"text-right options-col\"\\n' +\n    '\t\t\t\t\tdata-ng-if=\"(restNgGridCtrl.apiUrl.save || restNgGridCtrl.apiUrl.update || restNgGridCtrl.apiUrl.delete) && !isReadOnly\">\\n' +\n    '\t\t\t\t\t<a data-ng-if=\"restNgGridCtrl.apiUrl.save\" href=\"\" ng-click=\"restNgGridCtrl.addItem()\"><i class=\"fa fa-plus\"></i></a>\\n' +\n    '\t\t\t\t</th>\\n' +\n    '\t\t\t</tr>\\n' +\n    '\t\t\t</thead>\\n' +\n    '\t\t\t<tbody role=\"rowgroup\">\\n' +\n    '\t\t\t<tr class=\"m-master\"\\n' +\n    '\t\t\t\tdata-ng-repeat-start=\"item in items\" data-ng-class=\"{\\'active\\': currentItem.id == item.id}\">\\n' +\n    '\t\t\t\t<td ng-style=\"{{ c.style }}\" colspan=\"{{ c.colspan }}\" data-ng-click=\"restNgGridCtrl.selectRow($event, item, c)\"\\n' +\n    '\t\t\t\t\tdata-ng-repeat=\"c in restNgGridCtrl.columnList\">\\n' +\n    '\t\t\t\t\t<a href=\"\"\\n' +\n    '\t\t\t\t\t   data-ng-if=\"(((item[restNgGridCtrl.options.childCount] > 0 || item.children.length > 0) ||\\n' +\n    '\t\t\t\t\t\t(!item[restNgGridCtrl.options.childCount] && item[restNgGridCtrl.options.childCount] != 0)) && $index == 0 &&\\n' +\n    '\t\t\t\t\t\trestNgGridCtrl.isTranscluded)\"\\n' +\n    '\t\t\t\t\t   class=\"sub fa\"\\n' +\n    '\t\t\t\t\t   data-ng-click=\"restNgGridCtrl.toggleRow($event, item)\"\\n' +\n    '\t\t\t\t\t   data-ng-class=\"{\\'fa-plus-square-o\\': !item.isOpen, \\'fa-minus-square-o\\': item.isOpen}\">&nbsp;</a>\\n' +\n    '\t\t\t\t\t<span\\n' +\n    '\t\t\t\t\t\t\tdata-ng-if=\"(item[restNgGridCtrl.options.childCount] == 0 && $index == 0 && restNgGridCtrl.isTranscluded) ||\\n' +\n    '\t\t\t\t\t\t\t(restNgGridCtrl.options.dataSource.type == \\'tree\\' && item.children.length == 0 && $index == 0)\"\\n' +\n    '\t\t\t\t\t\t\tclass=\"sub fa fa-square-o\">&nbsp;</span>\\n' +\n    '\\n' +\n    '\t\t\t\t\t<div class=\"cell-content\">\\n' +\n    '\t\t\t\t\t\t<span data-ng-if=\"restNgGridCtrl.checkIfContent(item, c)\">\\n' +\n    '\t\t\t\t\t\t\t<span data-ng-if=\"!c.link\">{{ restNgGridCtrl.getValue(item, c.field, c.filter, c.visibility) }}</span>\\n' +\n    '\t\t\t\t\t\t\t<a data-ng-if=\"c.link\" data-ng-click=\"restNgGridCtrl.onCellLinkClick(item, c.field, c.link)\" >{{\\n' +\n    '\t\t\t\t\t\t\t\trestNgGridCtrl.getValue(item,\\n' +\n    '\t\t\t\t\t\t\t\t\tc.field,\\n' +\n    '\t\t\t\t\t\t\t\t\tc.filter,\\n' +\n    '\t\t\t\t\t\t\t\t\tc.visibility) }}</a>\\n' +\n    '\t\t\t\t\t\t</span>\\n' +\n    '\t\t\t\t\t\t<span data-ng-if=\"restNgGridCtrl.checkIfEdit(item, c)\">\\n' +\n    '\t\t\t\t\t\t\t<input data-ng-change=\"restNgGridCtrl.changeCellEvent(item, c)\" type=\"{{ c.type }}\" class=\"form-control\\n' +\n    '\t\t\t\t\t\t\tinput-sm\" data-ng-model=\"item[c.field]\" name=\"{{ c.inputName }}\" ng-value=\"{{ c.radioValue }}\"\\n' +\n    '\t\t\t\t\t\t\t\t   data-ng-required=\"c.validation.required\" />\\n' +\n    '\t\t\t\t\t\t</span>\\n' +\n    '\t\t\t\t\t\t<ul class=\"mj-children\" data-ng-if=\"item[restNgGridCtrl.options.childrenParam]\">\\n' +\n    '\t\t\t\t\t\t\t<li  data-ng-repeat=\"itemCh in item[restNgGridCtrl.options.childrenParam]\">\\n' +\n    '\t\t\t\t\t\t\t\t<!--{{ restNgGridCtrl.getValue(itemCh, c.field, c.filter) }}-->\\n' +\n    '\t\t\t\t\t\t\t\t<rest-grid-children collection=\"[itemCh]\" field=\"c.field\" filter=\"c.filter\"\\n' +\n    '\t\t\t\t\t\t\t\t\t\t\t\t  options=\"{childrenParam:\\'children\\'}\" />\\n' +\n    '\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t\t</li>\\n' +\n    '\t\t\t\t\t\t</ul>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t</td>\\n' +\n    '\t\t\t\t<td class=\"dropdown-menu-td\" data-ng-if=\"(restNgGridCtrl.apiUrl.save || restNgGridCtrl.apiUrl.update ||\\n' +\n    '        restNgGridCtrl.apiUrl.delete) &&\\n' +\n    '        !isReadOnly\">\\n' +\n    '\t\t\t\t\t<div data-ng-if=\"restNgGridCtrl.options.rowOptions == \\'dropdown\\'\" class=\"dropdown right\" uib-dropdown>\\n' +\n    '\t\t\t\t\t\t<a href=\"\"  class=\"dropdown-toggle\" uib-dropdown-toggle>\\n' +\n    '\t\t\t\t\t\t\t<i class=\"fa fa-cogs small\"></i>\\n' +\n    '\t\t\t\t\t\t</a>\\n' +\n    '\t\t\t\t\t\t<ul class=\"dropdown-menu extended small\" uib-dropdown-menu>\\n' +\n    '\t\t\t\t\t\t\t<li data-ng-if=\"restNgGridCtrl.apiUrl.save && addChildRow && restNgGridCtrl.isTranscluded\">\\n' +\n    '\t\t\t\t\t\t\t\t<a href=\"\" data-ng-click=\"restNgGridCtrl.addChildItem(item, $event)\"><span class=\"fa fa-plus\"></span> Add</a>\\n' +\n    '\t\t\t\t\t\t\t</li>\\n' +\n    '\t\t\t\t\t\t\t<li data-ng-if=\"restNgGridCtrl.apiUrl.update\">\\n' +\n    '\t\t\t\t\t\t\t\t<a href=\"\" data-ng-click=\"restNgGridCtrl.editItem(item, $event)\"><span class=\"fa fa-pencil\"></span> Edit</a>\\n' +\n    '\t\t\t\t\t\t\t</li>\\n' +\n    '\t\t\t\t\t\t\t<li data-ng-if=\"restNgGridCtrl.apiUrl.delete\">\\n' +\n    '\t\t\t\t\t\t\t\t<a href=\"\" data-ng-click=\"restNgGridCtrl.deleteItem(item, $event)\"><span class=\"fa fa-times\"></span>Delete\\n' +\n    '\t\t\t\t\t\t\t\t</a>\\n' +\n    '\t\t\t\t\t\t\t</li>\\n' +\n    '\t\t\t\t\t\t</ul>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\t\t\t\t\t<div data-ng-if=\"(restNgGridCtrl.options.rowOptions == \\'inline\\') && !isReadOnly\" class=\"list-options no-drp\">\\n' +\n    '\t\t\t\t\t\t<button data-ng-if=\"restNgGridCtrl.inlineMode.id == item.id\"\\n' +\n    '\t\t\t\t\t\t\t\tclass=\"h-r\"\\n' +\n    '\t\t\t\t\t\t\t\tdata-ng-click=\"restNgGridCtrl.cancelEditMode(item)\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"fa fa-close\"></span>\\n' +\n    '\t\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t\t<button data-ng-if=\"restNgGridCtrl.inlineMode.id == item.id\"\\n' +\n    '\t\t\t\t\t\t\t\tclass=\"h-r\"\\n' +\n    '\t\t\t\t\t\t\t\tdata-ng-click=\"restNgGridCtrl.saveRow(item, $event)\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"fa fa-check\"></span>\\n' +\n    '\t\t\t\t\t\t</button>\\n' +\n    '\\n' +\n    '\t\t\t\t\t\t<button data-ng-if=\"restNgGridCtrl.apiUrl.save && addChildRow && restNgGridCtrl.isTranscluded && !restNgGridCtrl.inlineMode.id\"\\n' +\n    '\t\t\t\t\t\t\t\tuib-tooltip-popup-delay=\"100\"\\n' +\n    '\t\t\t\t\t\t\t\tuib-tooltip=\"Add child\"\\n' +\n    '\t\t\t\t\t\t\t\ttooltip-placement=\"bottom\"\\n' +\n    '\t\t\t\t\t\t\t\tclass=\"h-r\"\\n' +\n    '\t\t\t\t\t\t\t\tdata-ng-click=\"restNgGridCtrl.addChildItem(item, $event)\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"fa fa-plus\"></span>\\n' +\n    '\t\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t\t<button data-ng-if=\"restNgGridCtrl.apiUrl.update && !restNgGridCtrl.inlineMode.id &&\\n' +\n    '\t\t\t\t\t\trestNgGridCtrl.checkIfRowEditable(item)\"\\n' +\n    '\t\t\t\t\t\t\t\tuib-tooltip-popup-delay=\"100\"\\n' +\n    '\t\t\t\t\t\t\t\tuib-tooltip=\"Edit\"\\n' +\n    '\t\t\t\t\t\t\t\ttooltip-placement=\"bottom\"\\n' +\n    '\t\t\t\t\t\t\t\tclass=\"h-r\"\\n' +\n    '\t\t\t\t\t\t\t\tdata-ng-click=\"restNgGridCtrl.editItem(item, $event)\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"fa fa-pencil\"></span>\\n' +\n    '\t\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t\t<button data-ng-if=\"restNgGridCtrl.apiUrl.delete && !restNgGridCtrl.inlineMode.id\" uib-tooltip-popup-delay=\"100\"\\n' +\n    '\t\t\t\t\t\t\t\tuib-tooltip=\"Delete\"\\n' +\n    '\t\t\t\t\t\t\t\ttooltip-placement=\"bottom\"\\n' +\n    '\t\t\t\t\t\t\t\tclass=\"h-r\"\\n' +\n    '\t\t\t\t\t\t\t\tdata-ng-click=\"restNgGridCtrl.deleteItem(item, $event)\">\\n' +\n    '\t\t\t\t\t\t\t<span class=\"fa fa-times\"></span>\\n' +\n    '\t\t\t\t\t\t</button>\\n' +\n    '\t\t\t\t\t</div>\\n' +\n    '\\n' +\n    '\\n' +\n    '\t\t\t\t</td>\\n' +\n    '\t\t\t</tr>\\n' +\n    '\t\t\t<tr data-ng-show=\"restNgGridCtrl.isTranscluded && item.isOpen\"\\n' +\n    '\t\t\t\tclass=\"m-detail\"\\n' +\n    '\t\t\t\tdata-ng-repeat-end>\\n' +\n    '\t\t\t\t<td colspan=\"{{ restNgGridCtrl.titleLength + 2}}\" rest-ng-grid-transclude current-item=\"item\"\\n' +\n    '\t\t\t\t\tparams=\"params\">&nbsp;</td>\\n' +\n    '\t\t\t</tr>\\n' +\n    '\t\t\t</tbody>\\n' +\n    '\t\t</table>\\n' +\n    '\t</div>\\n' +\n    '\t<div id=\"mj-footer\" class=\"mj-grid-footer\" ng-include=\"restNgGridCtrl.options.footer\">\\n' +\n    '\\n' +\n    '\t</div>\\n' +\n    '</div>');\n}]);\n})();\n"],"sourceRoot":"/source/"}